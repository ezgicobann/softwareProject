# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'voiceshow.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
import os
from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(917, 466)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.label_toplam_kayit = QtWidgets.QLabel(self.centralwidget)
        self.label_toplam_kayit.setGeometry(QtCore.QRect(100, 50, 101, 16))
        self.label_toplam_kayit.setObjectName("label_toplam_kayit")
        self.label_kiz_kayit = QtWidgets.QLabel(self.centralwidget)
        self.label_kiz_kayit.setGeometry(QtCore.QRect(145, 90, 81, 16))
        self.label_kiz_kayit.setObjectName("label_kiz_kayit")
        self.label_erkek_kayit = QtWidgets.QLabel(self.centralwidget)
        self.label_erkek_kayit.setGeometry(QtCore.QRect(130, 130, 111, 16))
        self.label_erkek_kayit.setObjectName("label_erkek_kayit")
        self.pushButton_kelime_ekle = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_kelime_ekle.setGeometry(QtCore.QRect(240, 7, 61, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_kelime_ekle.sizePolicy().hasHeightForWidth())
        self.pushButton_kelime_ekle.setSizePolicy(sizePolicy)
        self.pushButton_kelime_ekle.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_kelime_ekle.setStyleSheet("QPushButton {\n"
"    border: 2px solid #8f8f8f; \n"
"    border-radius: 10px;    \n"
"    padding: 5px;         \n"
"    background-color: #f0f0f0; \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #dcdcdc; \n"
"    \n"
"}\n"
"\n"
"\n"
"")
        self.pushButton_kelime_ekle.setObjectName("pushButton_kelime_ekle")
        self.pushButton_kelime_sil = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_kelime_sil.setGeometry(QtCore.QRect(630, 7, 61, 31))
        self.pushButton_kelime_sil.setStyleSheet("QPushButton {\n"
"    border: 2px solid #8f8f8f; \n"
"    border-radius: 10px;    \n"
"    padding: 5px;         \n"
"    background-color: #f0f0f0; \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #dcdcdc; \n"
"    \n"
"}")
        self.pushButton_kelime_sil.setDefault(False)
        self.pushButton_kelime_sil.setObjectName("pushButton_kelime_sil")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(390, 14, 81, 16))
        self.label.setObjectName("label")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 130, 114, 16))
        self.label_5.setObjectName("label_5")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 50, 79, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(90, 12, 137, 22))
        self.lineEdit.setStyleSheet("""
QLineEdit {
    border: 2px solid #ddd; /* İnce gri bir kenarlık */
    border-radius: 5px; /* Yuvarlatılmış köşeler */
    padding: 2px; /* Daha küçük bir iç boşluk */
    font-size: 12px; /* Daha okunabilir yazı boyutu */
    color: #333; /* Yazı rengi */
    background-color: #ffffff; /* Beyaz arka plan */
}
""")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(480, 12, 137, 22))
        self.lineEdit_2.setStyleSheet("""
QLineEdit {
    border: 2px solid #ddd; /* İnce gri bir kenarlık */
    border-radius: 5px; /* Yuvarlatılmış köşeler */
    padding: 2px; /* Daha küçük bir iç boşluk */
    font-size: 12px; /* Daha okunabilir yazı boyutu */
    color: #333; /* Yazı rengi */
    background-color: #ffffff; /* Beyaz arka plan */
}
""")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.treeWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.treeWidget.setGeometry(QtCore.QRect(10, 170, 891, 241))
        self.treeWidget.setStyleSheet("QTreeWidget {\n"
"    background-color: #ffffff; /* Beyaz arka plan rengi */\n"
"    border: 1px solid #ccc; /* İnce gri kenarlık */\n"
"    border-radius: 10px; /* Yuvarlatılmış köşeler */\n"
"    font-size: 14px; /* Yazı büyüklüğü */\n"
"    color: #333; /* Yazı rengi */\n"
"}\n"
"\n"
"")
        self.treeWidget.setLineWidth(1)
        self.treeWidget.setColumnCount(10)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setTextAlignment(0, QtCore.Qt.AlignLeading|QtCore.Qt.AlignVCenter)
        self.treeWidget.header().setDefaultSectionSize(110)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(12, 14, 70, 16))
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 90, 131, 16))
        self.label_4.setObjectName("label_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(400, 65, 71, 16))
        self.label_7.setObjectName("label_7")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(480, 65, 137, 22))
        self.lineEdit_3.setStyleSheet("""
QLineEdit {
    border: 2px solid #ddd; /* İnce gri bir kenarlık */
    border-radius: 5px; /* Yuvarlatılmış köşeler */
    padding: 2px; /* Daha küçük bir iç boşluk */
    font-size: 12px; /* Daha okunabilir yazı boyutu */
    color: #333; /* Yazı rengi */
    background-color: #ffffff; /* Beyaz arka plan */
}
""")
        self.lineEdit_3.setObjectName("lineEdit_3")
        try:
            with open("base_path.json", "r", encoding="utf-8") as file:
                self.base_paths = json.load(file)
                if isinstance(self.base_paths, list) and self.base_paths:  
                    self.base = self.base_paths[-1] 
                    self.lineEdit_3.setText(self.base_paths[-1])
                else:
                    print("JSON dosyası boş veya yanlış formatta!")
        except FileNotFoundError:
            print("JSON dosyası bulunamadı!")
        except json.JSONDecodeError:
            print("JSON dosyasını okurken bir hata oluştu!")
        except Exception as e:
            print(f"Bir hata oluştu: {str(e)}")        
        self.pushButton_base_path = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_base_path.setGeometry(QtCore.QRect(630, 60, 61, 31))
        self.pushButton_base_path.setStyleSheet("QPushButton {\n"
"    border: 2px solid #8f8f8f; \n"
"    border-radius: 10px;    \n"
"    padding: 5px;         \n"
"    background-color: #f0f0f0; \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #dcdcdc; \n"
"    \n"
"}")
        self.pushButton_base_path.setObjectName("pushButton_base_path")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 917, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_toplam_kayit.setText(_translate("MainWindow", "TextLabel"))
        self.label_kiz_kayit.setText(_translate("MainWindow", "TextLabel"))
        self.label_erkek_kayit.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_kelime_ekle.setText(_translate("MainWindow", "Add"))
        self.pushButton_kelime_sil.setText(_translate("MainWindow", "Delete"))
        self.label.setText(_translate("MainWindow", "Delete Word:"))
        self.label_5.setText(_translate("MainWindow", "Total Male Record:"))
        self.label_3.setText(_translate("MainWindow", "Total Record:"))
        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "Işığı"))
        self.treeWidget.headerItem().setText(1, _translate("MainWindow", "Alarmı"))
        self.treeWidget.headerItem().setText(2, _translate("MainWindow", "Multimedyayı"))
        self.treeWidget.headerItem().setText(3, _translate("MainWindow", "Aydınlatmayı"))
        self.treeWidget.headerItem().setText(4, _translate("MainWindow", "Parlaklığı"))
        self.treeWidget.headerItem().setText(5, _translate("MainWindow", "İklimlendirmeyi"))
        self.treeWidget.headerItem().setText(6, _translate("MainWindow", "Odayı"))
        self.treeWidget.headerItem().setText(7, _translate("MainWindow", "Fanı"))
        self.treeWidget.headerItem().setText(8, _translate("MainWindow", "Isıtmayı"))
        self.treeWidget.headerItem().setText(9, _translate("MainWindow", "Sıcaklığı"))
        self.label_2.setText(_translate("MainWindow", "Add Word:"))
        self.label_4.setText(_translate("MainWindow", "Total Female Record:"))
        self.label_7.setText(_translate("MainWindow", "Base Path:"))
        self.pushButton_base_path.setText(_translate("MainWindow", "Select"))
        

class VoiceShow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(VoiceShow, self).__init__()
        self.setupUi(self)
        self.json_file = "words.json"
        self.initialize_ui()
        self.word_list = self.load_words()
        self.show_counts(base_dir=f"{self.base}")
        

    def select_base_path(self):
        directory = self.lineEdit_3.text()

        if directory:
            self.lineEdit_3.setText(directory)
            QtWidgets.QMessageBox.information(self, "Information", "Path chosen successfully!\n\nPlease restart the MainWindow to apply changes!!!")

            try:
                # Mevcut JSON dosyasını oku
                with open("base_path.json", "r", encoding="utf-8") as file:
                    base_paths = json.load(file)
                    if not isinstance(base_paths, list):  # Eğer dosya liste değilse, listeye dönüştür
                        base_paths = []
            except (FileNotFoundError, json.JSONDecodeError):
                base_paths = []  # Eğer dosya yoksa veya bozuksa, boş liste başlat

            # Yeni dizini ekle 
            base_paths.append(directory)

            # Güncellenmiş listeyi dosyaya yaz
            with open("base_path.json", "w", encoding="utf-8") as file:
                json.dump(base_paths, file, indent=4, ensure_ascii=False)
        else:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Base Path seçilmedi!")


    def show_counts(self, base_dir):
        audio_extensions = ['.wav']

        male_count = 0
        female_count = 0

        # Kelimeler için sayım işlemi
        word_counts = {word: 0 for word in self.word_list}

        # Klasör yapısı içinde gezin
        for gender_folder in ['Male', 'Female']:
            gender_dir = os.path.join(base_dir, gender_folder)

            # Eğer bu dizin varsa, içeriğini kontrol et
            if os.path.isdir(gender_dir):
                for word in self.word_list:
                    word_dir = os.path.join(gender_dir, word)

                    if os.path.isdir(word_dir):
                        for root, dirs, files in os.walk(word_dir):
                            for file in files:
                                if any(file.lower().endswith(ext) for ext in audio_extensions):
                                    if gender_folder == "Male":
                                        male_count += 1
                                    elif gender_folder == "Female":
                                        female_count += 1
                                    word_counts[word] += 1  # Kelime sayısını artır

        self.label_kiz_kayit.setText(str(female_count))
        self.label_erkek_kayit.setText(str(male_count))
        

        # Sonuçları yazdır
        """
        print("Kelime Sayımları:")
        for word, count in word_counts.items():
            print(f"Kelime: {word}, Sayı: {count}")
        """
        # TreeWidget'ta göstermek için sayıları ekle
        self.treeWidget.clear()  # Önceki verileri temizle
        header = self.word_list  # Başlık olarak kelimeleri kullan
        self.treeWidget.setColumnCount(len(header))
        self.treeWidget.setHeaderLabels(header)

        # Yeni bir satır ekle
        row = QtWidgets.QTreeWidgetItem(self.treeWidget)

        for i, word in enumerate(self.word_list):
            row.setText(i, str(word_counts[word]))  # Kelimenin sayısını ilgili sütuna ekle

        # Toplam kayıtları göster
        total_count = sum(word_counts.values())
        self.label_toplam_kayit.setText(str(total_count))
        



    def initialize_ui(self):
      
        self.pushButton_kelime_ekle.clicked.connect(self.add_word)
        self.pushButton_kelime_sil.clicked.connect(self.delete_word)
        self.pushButton_base_path.clicked.connect(self.select_base_path)



    def show_adding_info(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Word")
        msg.setText("Are You Sure About Adding New Word ?")

        self.Yes = msg.addButton("Yes", QMessageBox.AcceptRole)
        self.No = msg.addButton("No", QMessageBox.RejectRole)

        msg.exec_()

        if msg.clickedButton() == self.Yes:
            self.add_word()

        elif msg.clickedButton() == self.No:
            return 0
        




    def add_word(self):
        kelime = self.lineEdit.text()
        if kelime:
            current_column_count = self.treeWidget.columnCount()
            self.treeWidget.setColumnCount(current_column_count + 1)

            headers = self.treeWidget.headerItem()
            headers.setText(current_column_count, kelime)

            for i in range(self.treeWidget.topLevelItemCount()):
                item = self.treeWidget.topLevelItem(i)
                item.setText(current_column_count, f"Yeni Veri {i+1}")  # Örnek veri ekle          
            
            self.save_words()

        else:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Kelime alanı boş olamaz!")


    def delete_word(self):
        column_name = self.lineEdit_2.text()

        if not column_name:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen silmek istediğiniz sütun adını girin!")
            return
        
        headers = [self.treeWidget.headerItem().text(i) for i in range(self.treeWidget.columnCount())]

        if column_name not in headers:
            QtWidgets.QMessageBox.warning(self, "Uyarı", f"'{column_name}' adlı bir sütun bulunamadı!")
            return
        
        column_index = headers.index(column_name)  # Sütunun indeksini bul

        # Kullanıcıdan onay al
        reply = QtWidgets.QMessageBox.question(
            self,
            "Emin misiniz?",
            f"'{column_name}' sütununu silmek istediğinize emin misiniz?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )

        if reply == QtWidgets.QMessageBox.Yes:
            # Sütunu kaldır
            current_column_count = self.treeWidget.columnCount()
            if current_column_count > 1:  # En az bir sütun kalmasını sağla
                for i in range(self.treeWidget.topLevelItemCount()):
                    item = self.treeWidget.topLevelItem(i)
                    for col in range(column_index, current_column_count - 1):
                        item.setText(col, item.text(col + 1))  # Sağdaki sütunları sola kaydır
                    item.setText(current_column_count - 1, "")  # Son sütunu boşalt

                # Sütun başlıklarını güncelle
            for col in range(column_index, current_column_count - 1):
                self.treeWidget.headerItem().setText(col, headers[col + 1])
            self.treeWidget.headerItem().setText(current_column_count - 1, "")

            self.treeWidget.setColumnCount(current_column_count - 1)  # Sütun sayısını azalt

            # JSON dosyasını güncelle
            self.update_json_after_column_delete(column_name)

        else:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "En az bir sütun kalmalıdır!")




    def update_json_after_column_delete(self, column_name):
        try:
            # JSON dosyasını yükle
            with open("words.json", "r", encoding="utf-8") as file:
                data = json.load(file)

            # Her satırda sütunu kaldır
            if column_name in data:
                data.remove(column_name)

            # JSON'u kaydet
            with open("words.json", "w", encoding="utf-8") as file:
                json.dump(data, file, indent=4, ensure_ascii=False)

            QtWidgets.QMessageBox.information(self, "Başarılı", f"'{column_name}' sütunu başarıyla silindi!")
        
        except FileNotFoundError:
            QtWidgets.QMessageBox.warning(self, "Hata", "JSON dosyası bulunamadı!")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Hata", f"Bir hata oluştu: {str(e)}")



    def save_words(self):
        headers = []
        for col in range(self.treeWidget.columnCount()):
            headers.append(self.treeWidget.headerItem().text(col))

        try:
            with open(self.json_file, "w", encoding = "utf-8") as file:
                json.dump(headers, file, ensure_ascii=False, indent=4)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Hata", f"Kelimeler kaydedilirken bir hata oluştu: {e}")

    def load_words(self):
        """JSON dosyasından kelimeleri yükler ve TreeWidget'i günceller."""
        try:
            with open(self.json_file, "r", encoding="utf-8") as file:
                headers = json.load(file)

            self.treeWidget.setColumnCount(len(headers))
            for col, header in enumerate(headers):
                self.treeWidget.headerItem().setText(col, header)
        except FileNotFoundError:
            # Eğer JSON dosyası yoksa, hiçbir şey yapma
            pass
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Hata", f"Kelimeler yüklenirken bir hata oluştu: {e}")
            
        return headers

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    voiceshow = VoiceShow()
    voiceshow.show()
    sys.exit(app.exec_())